#!/usr/bin/env python3

import os
import re
import sys
import requests
from string import Template

# This script well generate the .github/workflows/target-*.yml files and will help to keep them up to date.
# Execute this script from the OpenWrt root directory.

template_toolchain_ext = """
  build_ext:
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: False
      matrix:
        subtarget: [${subtarget}]
        testing: [${testing}]
    uses: ./.github/workflows/build.yml
    with:
      target: "${target}/$${{ matrix.subtarget }}"
      testing: $${{ matrix.testing }}
      build_kernel: true
      build_full: true
      build_all_boards: true
"""

template_toolchain_int = """
  build_int:
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: False
      matrix:
        subtarget: [${subtarget}]
        testing: [${testing}]
    uses: ./.github/workflows/build.yml
    with:
      target: "${target}/$${{ matrix.subtarget }}"
      testing: $${{ matrix.testing }}
      build_toolchain: true
      build_kernel: true
      build_full: true
      build_all_boards: true
"""

template = """name: Build ${target} target
# autogenerated file, see ./.github/workflows/scripts/create-target-files.py

on:
  pull_request:
    paths:
${paths}
  push:
    paths:
${paths}

permissions:
  contents: read

jobs:${build_ext}${build_int}

  check-kernel-patches:
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: False
      matrix:
        subtarget: [${subtarget_first}]
        testing: [${testing}]
    uses: ./.github/workflows/check-kernel-patches.yml
    with:
      target: "${target}/$${{ matrix.subtarget }}"
      testing: $${{ matrix.testing }}
"""


def subtarget_str(template, subtargets, mappings):
    """Return the filled template with the call to the build.yml file."""
    if len(subtargets) == 0:
        return ""

    subtarget_str = "generic"
    if len(subtargets) >= 1:
        subtarget_str = subtargets[0]
        for subtarget in subtargets[1:]:
            subtarget_str += ", "
            subtarget_str += subtarget
    mappings["subtarget"] = subtarget_str
    return Template(template).substitute(mappings)


def find_path_in(target, base_path, search_path):
    """Find extra folder names with the target name in it in the given search_path"""
    paths = ""
    for file in os.listdir(os.path.join(base_path, search_path)):
        file_path = os.path.join(base_path, search_path, file)
        if target in file:
            if os.path.isdir(file_path):
                paths += f"      - '{search_path}/{file}/**'\n"
            else:
                paths += f"      - '{search_path}/{file}'\n"
    return paths


def get_paths(target, base_path):
    """Return the paths the github workflow should trigger on."""
    paths = f"      - '.github/workflows/target-{target}.yml'\n"
    paths += f"      - 'target/linux/{target}/**'\n"
    paths += find_path_in(target, base_path, os.path.join("package", "kernel"))
    paths += find_path_in(target, base_path, os.path.join("package", "firmware"))
    paths += find_path_in(target, base_path, os.path.join("package", "boot"))
    paths += find_path_in(
        target, base_path, os.path.join("package", "network", "utils")
    )
    return paths


def is_ext_toolchain(target, subtarget):
    toolchain_hash = requests.get(
        f"https://downloads.cdn.openwrt.org/snapshots/targets/{ target }/{ subtarget }/sha256sums"
    )
    return toolchain_hash.ok and "toolchain" in toolchain_hash.text


def is_testing_kernel_set(target_path):
    with open(os.path.join(target_path, "Makefile")) as f:
        kernel_patchver = ""
        kernel_testing_patchver = ""
        for line in f:
            m = re.match(r"KERNEL_PATCHVER:=([0-9\.]*)", line)
            if m:
                kernel_patchver = m.group(1)
            m = re.match(r"KERNEL_TESTING_PATCHVER:=([0-9\.]*)", line)
            if m:
                kernel_testing_patchver = m.group(1)
        return (
            kernel_patchver
            and kernel_testing_patchver
            and kernel_patchver != kernel_testing_patchver
        )


base_path = os.getcwd()
if ".github" not in os.listdir(base_path) or "target" not in os.listdir(base_path):
    print("Please execute this script from OpenWrt root folder")
    sys.exit(-1)

target_folder = os.path.join(base_path, "target", "linux")

for target in os.listdir(target_folder):
    target_path = os.path.join(target_folder, target)
    if not os.path.isdir(target_path):
        continue
    if not os.path.exists(os.path.join(target_path, "Makefile")):
        continue

    subtargets_ext = []
    subtargets_int = []
    for subtarget in os.listdir(target_path):
        subtarget_path = os.path.join(target_path, subtarget)
        if not os.path.isdir(subtarget_path):
            continue
        if not os.path.exists(os.path.join(subtarget_path, "target.mk")):
            continue
        if is_ext_toolchain(target, subtarget):
            subtargets_ext.append(subtarget)
        else:
            subtargets_int.append(subtarget)
    subtargets_ext.sort()
    subtargets_int.sort()

    testing_str = "false"
    if is_testing_kernel_set(target_path):
        testing_str = "false, true"

    with open(
        os.path.join(base_path, ".github", "workflows", f"target-{target}.yml"), "w"
    ) as f:
        if len(subtargets_ext) + len(subtargets_int) == 0:
            if is_ext_toolchain(target, "generic"):
                subtargets_ext.append("generic")
            else:
                subtargets_int.append("generic")

        subtargets = subtargets_ext + subtargets_int

        paths = get_paths(target, base_path)[:-1]

        mappings = {
            "paths": paths,
            "subtarget_first": subtargets[0],
            "target": target,
            "testing": testing_str,
        }

        subtarget_ext = subtarget_str(
            template_toolchain_ext, subtargets_ext, mappings.copy()
        )
        subtarget_int = subtarget_str(
            template_toolchain_int, subtargets_int, mappings.copy()
        )

        mappings["build_ext"] = subtarget_ext
        mappings["build_int"] = subtarget_int

        content = Template(template).substitute(mappings)

        f.write(content)
