--- a/arch/mips/bcm47xx/setup.c
+++ b/arch/mips/bcm47xx/setup.c
@@ -34,6 +34,7 @@
 #include <linux/ethtool.h>
 #include <linux/phy.h>
 #include <linux/phy_fixed.h>
+#include <linux/mdio.h>
 #include <linux/ssb/ssb.h>
 #include <linux/ssb/ssb_embedded.h>
 #include <linux/bcma/bcma_soc.h>
@@ -265,6 +266,24 @@ static struct fixed_phy_status bcm47xx_f
 
 static struct gpio_wdt_platform_data gpio_wdt_data;
 
+static int bcm47xx_fixed_phy_probe(struct platform_device *pdev)
+{
+	struct phy_device *phydev;
+
+	phydev = fixed_phy_register(PHY_POLL, &bcm47xx_fixed_phy_status, NULL);
+	if (IS_ERR(phydev)) {
+		return dev_err_probe(&pdev->dev, PTR_ERR(phydev), "failed to register the fixed PHY\n");
+	}
+
+	dev_info(&pdev->dev, "probed fixed PHY\n");
+	return 0;
+}
+
+static struct platform_driver bcm47xx_fixed_phy_drv = {
+	.probe = bcm47xx_fixed_phy_probe,
+	.driver = { .name = "bcm47xx-fixed-phy", },
+};
+
 static struct platform_device gpio_wdt_device = {
 	.name			= "gpio-wdt",
 	.id			= 0,
@@ -310,7 +329,16 @@ static int __init bcm47xx_register_bus_c
 	bcm47xx_leds_register();
 	bcm47xx_workarounds();
 
-	fixed_phy_add(PHY_POLL, 0, &bcm47xx_fixed_phy_status);
+	if (platform_driver_register(&bcm47xx_fixed_phy_drv)) {
+		pr_err("fixed-phy: failed to register driver\n");
+		return 0;
+	}
+
+	if (IS_ERR(platform_device_register_simple(
+		    "bcm47xx-fixed-phy", PLATFORM_DEVID_NONE, NULL, 0))) {
+		pr_err("fixed-phy: failed to register device\n");
+	}
+
 	bcm47xx_register_gpio_watchdog();
 	return 0;
 }
