// ****************************************************************************
//
// Copyright (c) 2008 Broadcom Corporation
//
// This program is the proprietary software of Broadcom Corporation and/or
// its licensors, and may only be used, duplicated, modified or distributed
// pursuant to the terms and conditions of a separate, written license
// agreement executed between you and Broadcom (an "Authorized License").
// Except as set forth in an Authorized License, Broadcom grants no license
// (express or implied), right to use, or waiver of any kind with respect to
// the Software, and Broadcom expressly reserves all rights in and to the
// Software and all intellectual property rights therein.  IF YOU HAVE NO
// AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY,
// AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE
// SOFTWARE.  
//
// Except as expressly set forth in the Authorized License,
//
// 1.     This program, including its structure, sequence and organization,
// constitutes the valuable trade secrets of Broadcom, and you shall use all
// reasonable efforts to protect the confidentiality thereof, and to use this
// information only in connection with your use of Broadcom integrated circuit
// products.
//
// 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
// "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
// OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
// RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
// IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
// A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
// ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
// THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
//
// 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
// OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
// INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
// RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
// HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
// EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
// WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
// FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
//
// ****************************************************************************
//
//  Filename:         unimac_mbdma.h
//  Generated by:     RDB Utility
//  Creation Date:    8/7/2008
//  Command Line:     
// ****************************************************************************
//
// IMPORTANT: DO NOT MODIFY, THIS IS AN AUTOGENERATED FILE. 
// Please modify the source .rdb file instead if you need to change this file. 
// Contact Jeff Bauch if you need more information.
//
// ****************************************************************************
#ifndef UNIMAC_MBDMA_H__
#define UNIMAC_MBDMA_H__



typedef union {
  struct {
    uint32 Reserved                       :16;
    uint32 Allocnotlow                    :8; 
                                              
    uint32 Alloclow                       :8; 
                                              
  } Bits;
  uint32 Reg32;
}  MbdmaBackPressCtl;


typedef union {
  struct {
    uint32 Reserved                       :29;
    uint32 BuffSize                       :3; 
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  MbdmaBufferSize;


typedef union {
  struct {
    uint32 Reserved                       :27;
    uint32 DiagMatchMask                  :1; 
                                              
    uint32 InvalidMsgMask                 :1; 
    uint32 MsgqOverflowMask               :1; 
    uint32 TokenRdErrorMask               :1; 
    uint32 InvalidTokenMask               :1; 
                                              
  } Bits;
  uint32 Reg32;
}  MbdmaCapMask;


typedef union {
  struct {
    uint32 Reserved                       :27;
    uint32 DiagMatch                      :1; 
                                              
    uint32 InvalidMsg                     :1; 
    uint32 MsgqOverflow                   :1; 
    uint32 TokenRdError                   :1; 
    uint32 InvalidToken                   :1; 
                                              
  } Bits;
  uint32 Reg32;
}  MbdmaCapStat;


typedef union {
  struct {
    uint32 AllocLimit                     :8; 
                                              
    uint32 FlushCache                     :1; 
    uint32 Reserved                       :1; 
    uint32 TopArbCtl                      :2; 
                                              
                                              
                                              
    uint32 RxArbCtl                       :2; 
                                              
                                              
                                              
    uint32 TxArbCtl                       :2; 
                                              
                                              
                                              
    uint32 Reserved2                      :4; 
    uint32 LanTxMsgId3w                   :6; 
                                              
    uint32 LanTxMsgId2w                   :6; 
  } Bits;
  uint32 Reg32;
}  MbdmaGlobalCtl;


typedef union {
  struct {
    uint32 StartStopFlush                 :2; 
    uint32 EavMode                        :1; 
    uint32 MaxBurst                       :9; 
    uint32 AddrForward                    :1; 
                                              
    uint32 ErrForward                     :1; 
    uint32 MsgId                          :6; 
    uint32 MacId                          :4; 
    uint32 Qos                            :4; 
    uint32 Reserved                       :4; 
  } Bits;
  uint32 Reg32;
}  MbdmaRxChanControl;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 Rxchanerr                      :1; 
                                              
  } Bits;
  uint32 Reg32;
}  MbdmaRxChanErr;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 Rxchanerrmask                  :1; 
  } Bits;
  uint32 Reg32;
}  MbdmaRxChanErrMsk;


typedef union {
  struct {
    uint32 GblIntrMask                    :1; 
                                              
                                              
    uint32 Reserved                       :5; 
    uint32 IntrMask                       :10;
                                              
    uint32 Reserved2                      :6; 
    uint32 TxMsgqOverflow                 :1; 
    uint32 InvalidTxMsgIntr               :1; 
                                              
    uint32 DiagIntr                       :1; 
    uint32 UbusError                      :1; 
    uint32 TokenRdError                   :1; 
                                              
    uint32 InvalidToken                   :1; 
                                              
    uint32 AllocFifoEmpty                 :1; 
                                              
    uint32 AllocFifoFull                  :1; 
                                              
    uint32 FreeFifoEmpty                  :1; 
                                              
    uint32 FreeFifoFull                   :1; 
                                              
  } Bits;
  uint32 Reg32;
}  MbdmaStatus;


typedef union {
  struct {
    uint32 AllocEnable                    :1; 
    uint32 Reserved                       :2; 
    uint32 AllocMaxBurst                  :5; 
    uint32 AllocThresh                    :8; 
                                              
                                              
                                              
    uint32 FreeEnable                     :1; 
    uint32 Reserved2                      :2; 
    uint32 FreeMaxBurst                   :5; 
    uint32 FreeThresh                     :8; 
                                              
                                              
  } Bits;
  uint32 Reg32;
}  MbdmaTokenCacheCtl;


typedef union {
  struct {
    uint32 StartStopFlush                 :2; 
    uint32 EavMode                        :1; 
    uint32 MaxBurst                       :9; 
    uint32 Reserved                       :5; 
    uint32 TxStatOnError                  :1; 
                                              
    uint32 MsgId                          :6; 
    uint32 MacId                          :4; 
    uint32 MaxReqs                        :4; 
  } Bits;
  uint32 Reg32;
}  MbdmaTxChanControl;


typedef union {
  struct {
    uint32 Reserved                       :15;
    uint32 TxMsgqOverflow                 :1; 
                                              
                                              
    uint32 TxMsgqDepth                    :8; 
                                              
    uint32 TxMsgqNearFullLevel            :8; 
                                              
  } Bits;
  uint32 Reg32;
}  MbdmaTxChanControl2;

typedef struct {
  MbdmaStatus                         Status;                  
  MbdmaTokenCacheCtl                  Tokencachectl;           
  uint32                              Tokenaddress;            
  MbdmaGlobalCtl                      Globalctl;               
  uint32                              Bufferbase;              
  MbdmaBufferSize                     Buffersize;              
  MbdmaRxChanErr                      Rxchanerr;               
  MbdmaRxChanErrMsk                   Rxchanerrmask;           
  MbdmaBackPressCtl                   Backpressctl;            
  uint32                              Diagout;                 
  uint32                              Diagcompare;             
  uint32                              Diagmask;                
  MbdmaCapStat                        Capturestatus;           
  MbdmaCapMask                        Capturemask;             
  uint8                               Pad0[0x8];
  MbdmaRxChanControl                  Chancontrol00;           
  uint32                              Lanmsgaddress0;          
  uint8                               Pad1[0x18];
  MbdmaTxChanControl                  Chancontrol01;           
  uint32                              Lanmsgaddress1;          
  MbdmaTxChanControl2                 Chancontrol201;          
  uint8                               Pad2[0x14];
  MbdmaTxChanControl                  Chancontrol02;           
  uint32                              Lanmsgaddress2;          
  MbdmaTxChanControl2                 Chancontrol202;          
  uint8                               Pad3[0x474];
  uint32                              Lantxmsgfifo01;          
  uint8                               Pad4[0x4];
  uint32                              Lantxmsgfifo02;          
}  MbdmaRegisters;

#endif 



