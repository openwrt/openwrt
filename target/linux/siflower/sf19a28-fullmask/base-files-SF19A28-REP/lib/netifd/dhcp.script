#!/bin/sh
[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh

[ -f /proc/sfax8_mode_info ] && apMode=`cat /proc/sfax8_mode_info`
if [ "${apMode}" = "1"  ]; then
	if [ ! -f /etc/config/auto_tmp ]; then
		touch /etc/config/auto_tmp
		chmod a+x /etc/config/auto_tmp
		uci set auto_tmp.tmp='tmp'
		uci set auto_tmp.tmp.dhcp_enable="1"
		uci set auto_tmp.tmp.connectmode="1"
		uci commit auto_tmp
	fi
	uci get network.alias
	if [ $? -eq 1 -a "${apMode}" != "0" ] ;then
		uci -q batch <<EOF
		set network.alias='interface'
		set network.alias.ifname='@lan'
		set network.alias.proto='static'
		set network.alias.ipaddr='192.168.4.252'
		set network.alias.netmask='255.255.255.0'
EOF
		uci commit
		/etc/init.d/network restart
	fi
fi

set_classless_routes() {
	local max=128
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		proto_add_ipv4_route "${1%%/*}" "${1##*/}" "$2" "$ip"
		max=$(($max-1))
		shift 2
	done
}

setup_interface () {
	if [ "${apMode}" = "1"  ]; then
		ubus call network.interface.alias down
	fi
	proto_init_update "*" 1
	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
	# TODO: apply $broadcast

	for i in $router; do
		proto_add_ipv4_route "$i" 32 "" "$ip"
		proto_add_ipv4_route 0.0.0.0 0 "$i" "$ip"

		for r in $CUSTOMROUTES; do
			proto_add_ipv4_route "${r%%/*}" "${r##*/}" "$i" "$ip"
		done
	done

	# CIDR STATIC ROUTES (rfc3442)
	[ -n "$staticroutes" ] && set_classless_routes $staticroutes
	[ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes

	for dns in $dns; do
		proto_add_dns_server "$dns"
	done
	for domain in $domain; do
		proto_add_dns_search "$domain"
	done

	proto_add_data
	[ -n "$ZONE" ]     && json_add_string zone "$ZONE"
	[ -n "$ntpsrv" ]   && json_add_string ntpserver "$ntpsrv"
	[ -n "$timesvr" ]  && json_add_string timeserver "$timesvr"
	[ -n "$hostname" ] && json_add_string hostname "$hostname"
	[ -n "$message" ]  && json_add_string message "$message"
	[ -n "$timezone" ] && json_add_int timezone "$timezone"
	[ -n "$lease" ]    && json_add_int leasetime "$lease"
	proto_close_data

	proto_send_update "$INTERFACE"

	#add wan lan net clash check
	netclash $ip ${subnet:-255.255.255.0}

	if [ "$IFACE6RD" != 0 -a -n "$ip6rd" ]; then
		local v4mask="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefixlen="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefix="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdbr="${ip6rd%% *}"

		[ -n "$ZONE" ] || ZONE=$(fw3 -q network $INTERFACE  2>/dev/null)
		[ -z "$IFACE6RD" -o "$IFACE6RD" = 1 ] && IFACE6RD=${INTERFACE}_6

		json_init
		json_add_string name "$IFACE6RD"
		json_add_string ifname "@$INTERFACE"
		json_add_string proto "6rd"
		json_add_string peeraddr "$ip6rdbr"
		json_add_int ip4prefixlen "$v4mask"
		json_add_string ip6prefix "$ip6rdprefix"
		json_add_int ip6prefixlen "$ip6rdprefixlen"
		json_add_string tunlink "$INTERFACE"
		[ -n "$IFACE6RD_DELEGATE" ] && json_add_boolean delegate "$IFACE6RD_DELEGATE"
		[ -n "$ZONE6RD" ] || ZONE6RD=$ZONE
		[ -n "$ZONE6RD" ] && json_add_string zone "$ZONE6RD"
		[ -n "$MTU6RD" ] && json_add_string mtu "$MTU6RD"
		json_close_object

		ubus call network add_dynamic "$(json_dump)"
	fi
	if [ "${apMode}" = "1"  ]; then
		ubus call network.interface.alias up
		uci set auto_tmp.tmp.ac="1"
		uci set auto_tmp.tmp.ipaddr="$ip"
		uci set auto_tmp.tmp.netmask="$subnet"
		uci set auto_tmp.tmp.dns="$dns"
		uci set auto_tmp.tmp.gateway="$router"
		uci commit auto_tmp
	fi
	echo "$(date) INFO WAN get ip:$ip subnet:$subnet router:$router dns:$dns" >>/tmp/sf_log.txt
}

deconfig_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
	if [ "${apMode}" = "1"  ]; then
		uci set auto_tmp.tmp.ac="0"
		uci commit auto_tmp

		ubus call network.device set_alias '{ "alias": ["lan"] ,"device":"br-lan"}'
	fi
}

case "$1" in
	deconfig)
		deconfig_interface
	;;
	bound)
		setup_interface
		# user rules
		[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user "$@"
	;;
	renew)
		setup_interface
	;;
esac

if [ "${apMode}" = "1"  ]; then
	# user rules
	[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user "$@"
fi

[ -n "$(uci -q get network.stabridge)" -a -n "$ip" ] && {
	#echo "$0 set stabridge ip" > /dev/ttyS0
	uci set network.stabridge.ipaddr="$ip"
	uci commit network
	/etc/init.d/relayd restart
}
exit 0
